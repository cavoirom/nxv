{"home":{"title":"vinh","me":{"title":"Hello.","content":"My name is <i><b>vinh</b></i>, I'm a programmer. This is my corner on the Internet. I mostly write about technology related stuffs, my family, some time I also mention my trust in Jesus Christ, my Savior."},"journey":{"title":"journey","years":[{"year":2020,"events":["started this site."]}]},"work":{"title":"companies","years":[{"year":2022,"events":["mesoneer"]},{"year":2021,"events":["UMB"]},{"year":2018,"events":["ubitec"]},{"year":2013,"events":["Axon Active Vietnam"]}]}},"site":{"title":"Setup Unix Shell on Windows","path":"/blog/entry/2021/06/13/unix-shell-on-windows"},"blog":{"entries":[],"entriesByTag":[],"entry":{"title":"Setup Unix Shell on Windows","url":"/blog/entry/2021/06/13/unix-shell-on-windows","slug":"unix-shell-on-windows","author":"vinh","preview":"I used Cygwin, zsh, oh-my-zsh to have better Shell in Windows.","created":"2021-06-13T05:21:47.525Z","updated":"2021-06-13T08:44:13.219Z","content":"<h2>The Command Line Environment</h2>\n<p>I see new developers are usually struggling with command line just because they\nare using Windows, it makes them distance from the community who are using Linux\nand Unix-like systems, and end up with tutorials which is not working on Windows\nbecause it included Linux command or Bash script.</p>\n<p>For a Unix shell on Windows, we have plenty options: Git Bash, WSL, WSL2, MinGW.\nBut I found them incomplete and un-natural to work with (sorry I don't want to\ngo more detail about their issues, you could find them on the internet).</p>\n<p>In this <em>entry</em>, let's try a more classical way:\n<a href=\"https://cygwin.com/install.html\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">Cygwin</a>.</p>\n<p><strong>It's about the environment, not the tools ·</strong> Cygwin tries to provide the\nPOSIX-compliant development and run-time environment\n<a href=\"https://en.wikipedia.org/wiki/POSIX#POSIX_for_Microsoft_Windows\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">[1]</a> while\nretains the speed of native Windows application. The POSIX-compliant is what\nmake it feel the same with other Unix-like environment. It also comes with trade\noff: every program runs on Cygwin must be compiled for Cygwin. Thankfully, most\nof common command line tools supported Cygwin.</p>\n<p><strong>The Terminal ·</strong> When working with command line, Terminal is the entry point\nfor everything. Most of Windows users don't have nice memories with Terminal\njust because of cmd.exe. Cygwin bundled with Mintty which is very good. Read\nmore about how a slow Terminal could affect your working experience:\n<a href=\"https://danluu.com/term-latency/\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">https://danluu.com/term-latency/</a></p>\n<p><img src=\"./unix-shell-on-windows/image/mintty.png\" alt=\"Mintty screenshot from official home page\" title=\"Mintty screenshot from official home page\" class=\"blog-entry__image\" /></p>\n<p><strong>Shell ·</strong> If the Terminal provides the nice interface to interact with the\nsystem, the Shell provides API and tools to command the system. The natural\nchoice is Bash, I recommend zsh because it's Bash-compliant with nicer features\nsuch as auto-completion, you also want to install oh-my-zsh to enhance your\nexperience.</p>\n<p><strong>Package Manager ·</strong> The package manager in Cygwin is minimal and easy to use,\nits interface is not super nice but I found it's useful and straightforward.</p>\n<h2>Installation</h2>\n<p><strong>Step 1 ·</strong> Install Cygwin and essential packages:</p>\n<ul>\n<li>Download Cygwin 64-bit installer: <a href=\"https://cygwin.com/install.html\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">https://cygwin.com/install.html</a></li>\n<li>Run command to setup Cygwin without Administrator permission:\n<code>setup-x86_64.exe --no-admin</code></li>\n<li>Choose directory for Cygwin installation and packages.</li>\n<li>Choose a mirror to download packages. Linux users are familiar with mirrors\nfor packages, technically, it's a file server hosting Cygwin packages\nvoluntarily.</li>\n<li>Select essential packages:\n<ul>\n<li>zsh: a nice Shell replacement for Bash.</li>\n<li>git: who don't need git today?</li>\n</ul></li>\n<li>After finished the installation, don't delete the Cygwin installer, you will\nneed it to install new package.</li>\n</ul>\n<p><strong>Step 2 ·</strong> Configure zsh and Mintty:</p>\n<ul>\n<li>Choose zsh as default Shell for Mintty.</li>\n<li>Install <a href=\"https://github.com/tonsky/FiraCode\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">Fira Code</a> font and use it as\ndefault in Mintty. This is a nice font for coding in general, it supported\n<a href=\"https://en.wikipedia.org/wiki/Ligature_(writing)\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">ligatures</a>.</li>\n</ul>\n<p><strong>Step 3 ·</strong> Configure oh-my-zsh, plugins and themes. The\n<a href=\"https://ohmyz.sh/#install\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">installation guideline</a> in oh-my-zsh home page is\napplicable for Cygwin. I only need to add plugins: git,\n<a href=\"https://github.com/zsh-users/zsh-autosuggestions\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">zsh-autosuggestions</a> and the\ntheme <a href=\"https://github.com/yarisgutierrez/classyTouch_oh-my-zsh\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">classyTouch</a>.</p>\n<p><strong>Step 4 ·</strong> Git. The only important note is using Git from Cygwin package\nmanager. Git will not work properly if you use the offical Git for Windows\npackage because Git depends on Cygwin API to work with POSIX environment.</p>\n<h2>Java</h2>\n<p>The easiest way to manage many JDK version is using the zip package:</p>\n<ul>\n<li>Download JDK from: <a href=\"https://adoptopenjdk.net/releases.html\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">https://adoptopenjdk.net/releases.html</a></li>\n<li>Add <code>JAVA_HOME</code> environment variable to <code>~/.zshrc</code>:\n<code>export JAVA_HOME=/cygdrive/d/devtool/jdk-11</code></li>\n<li>Add JDK binaries to <code>PATH</code>: <code>export PATH=$PATH:$JAVA_HOME/bin</code></li>\n<li>Restart Mintty. Note that this configuration only affects to Cygwin\nenvironment.</li>\n</ul>\n<h2>Node.js</h2>\n<p>Node.js also provides zip package, the installation is similar to Java, and you\ncan manage many versions without problem:</p>\n<ul>\n<li>Download 64-bit zip binary: <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"nofollow noreferrer noopener\">https://nodejs.org/en/download/</a></li>\n<li>Add Node.js binaries (node, npm..) to <code>PATH</code> in <code>~/.zshrc</code>:\n<code>export PATH=$PATH:/cygdrive/d/devtool/node-v14</code></li>\n<li>Restart Mintty. Note that this configuration only affects to Cygwin\nenvironment.</li>\n</ul>\n<h2>Final Thought</h2>\n<p>The goal of this <em>entry</em> is setting a consistent environment between Windows,\nMacOS, Linux and other Unix-like systems. When you have the same POSIX-compliant\nenvironment and use the same tools, you will get better support from the\ncommunity and your colleagues. You can write a Bash script on your Windows\nmachine that could run successfully on Linux server, you can receive a script\nfrom 20 years Unix experience guy and run without error on your machine, that is\na big win for both.</p>\n","tags":["cygwin","development","java","nodejs","oh-my-zsh","shell","unix","windows","zsh"]}}}
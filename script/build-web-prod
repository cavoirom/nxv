#!/usr/bin/env bash

set -e
set -o pipefail

# Prerequisites
# - deno 1.31.1.
# - dart-sass 1.57.1.
# - closure-compiler via environment variable CLOSURE_COMPILER.

if ! command -v deno &> /dev/null; then
  echo "Please install deno 1.31.1 or later."
  exit 1
fi

if ! command -v sass &> /dev/null; then
  echo "Please install dart-sass 1.57.1 or later."
  exit 1
fi

if ! command -v java &> /dev/null; then
  echo "Please install JDK 11 or later."
  exit 1
fi

SCRIPT_DIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

source "$SCRIPT_DIRECTORY/utilities"

# Environment variables
PROJECT_DIRECTORY="$( absolute_path "${SCRIPT_DIRECTORY}/.." )"
WEB_DIRECTORY="$PROJECT_DIRECTORY/web"

CACHE_DIRECTORY="${PROJECT_DIRECTORY}/.cache"
DENO_DIRECTORY="${CACHE_DIRECTORY}/deno"

# Download and install closure-compiler.
if [ -z "$CLOSURE_COMPILER" ]; then
  CLOSURE_COMPILER_SHA256="78458d84c523a7e88107dbb3541e37d2401f9288ed2b1d834d41b0a7131cf94b"
  CLOSURE_COMPILER_DIRECTORY="${CACHE_DIRECTORY}/tools/closure_compiler"
  CLOSURE_COMPILER="$CLOSURE_COMPILER_DIRECTORY/closure_compiler.jar"
  mkdir -p "$CLOSURE_COMPILER_DIRECTORY"
  download \
      "$CLOSURE_COMPILER_SHA256" \
      "https://repo1.maven.org/maven2/com/google/javascript/closure-compiler/v20220719/closure-compiler-v20220719.jar" \
      "$CLOSURE_COMPILER"
fi

# test the web: currently error because of JSDOM on esm.sh.
# DENO_DIR="${DENO_DIRECTORY}" deno test \
#     --config "$PROJECT_DIRECTORY/deno.jsonc" \
#     --allow-env \
#     "$WEB_DIRECTORY/test"

# clean build directory.
rm -rf "$WEB_DIRECTORY/build"
mkdir -p "$WEB_DIRECTORY/build/dist"

# bundle the app to index.js.
DENO_DIR="${DENO_DIRECTORY}" deno run \
    --config "${PROJECT_DIRECTORY}/deno.jsonc" \
    --allow-read \
    --allow-run \
    --allow-env \
    --allow-write \
    "${WEB_DIRECTORY}/bundler/bundler.js" \
    --import-map "${PROJECT_DIRECTORY}/import-map.json" \
    --entrypoint "${WEB_DIRECTORY}/app/index.js" \
    --out-file "${WEB_DIRECTORY}/build/dist/index.js"

# bundle worker.js
DENO_DIR="${DENO_DIRECTORY}" deno run \
    --config "${PROJECT_DIRECTORY}/deno.jsonc" \
    --allow-read \
    --allow-run \
    --allow-env \
    --allow-write \
    "${WEB_DIRECTORY}/bundler/bundler.js" \
    --import-map "${PROJECT_DIRECTORY}/import-map.json" \
    --entrypoint "${WEB_DIRECTORY}/app/worker.js" \
    --out-file "${WEB_DIRECTORY}/build/dist/worker.js"

# download purecss
mkdir -p "${CACHE_DIRECTORY}/deps/purecss/2.1.0"
download \
    "8c01fbca2681ae46e5a6c626c236734cc7fea87785b611554fc818ece43c08ac" \
    "https://cdn.jsdelivr.net/npm/purecss@2.1.0/build/base-min.css" \
    "${CACHE_DIRECTORY}/deps/purecss/2.1.0/base-min.scss"
download \
    "dbb583ba6e838e6c22199e69bcae90af3ea735f959df70d97bc792bdeaf72285" \
    "https://cdn.jsdelivr.net/npm/purecss@2.1.0/build/grids-min.css" \
    "${CACHE_DIRECTORY}/deps/purecss/2.1.0/grids-min.scss"
download \
    "2131b61e813b7ce13fe5ab44c2a1bd25ab937f6eb4b5343584e22c981d262227" \
    "https://cdn.jsdelivr.net/npm/purecss@2.1.0/build/grids-responsive-min.css" \
    "${CACHE_DIRECTORY}/deps/purecss/2.1.0/grids-responsive-min.scss"
# bundle css to index.css.
sass --style compressed "$WEB_DIRECTORY/app/index.scss" "$WEB_DIRECTORY/build/dist/index.css"

# copy static content.
cp "$WEB_DIRECTORY/app/favicon.ico" "$WEB_DIRECTORY/build/dist/"
cp "$WEB_DIRECTORY/app/manifest.webmanifest" "$WEB_DIRECTORY/build/dist/"
cp "$WEB_DIRECTORY/app/index.html" "$WEB_DIRECTORY/build/dist/"
# change reference to minified bundle.
# use UNIX sed or GNU sed, depend on environment.
if [[ $OSTYPE == "darwin"* ]]; then
  sed -i '' -E "s|index\.js|index\.min\.js|" "$WEB_DIRECTORY/build/dist/index.html"
  sed -i '' -E "s|worker\.js|worker.min\.js|" "$WEB_DIRECTORY/build/dist/index.html"
else
  sed -i -r "s/index\.js/index\.min\.js/" "$WEB_DIRECTORY/build/dist/index.html"
  sed -i -r "s/worker\.js/worker.min\.js/" "$WEB_DIRECTORY/build/dist/index.html"
fi
cp "$WEB_DIRECTORY/content/static/CNAME" "$WEB_DIRECTORY/build/dist/"

# generate site from content.
DENO_DIR="${DENO_DIRECTORY}" deno run \
    --config "$PROJECT_DIRECTORY/deno.jsonc" \
    --allow-read \
    --allow-write \
    --allow-env \
    "$WEB_DIRECTORY/generator/generator.js"

echo "Minify index.js."
java -jar "$CLOSURE_COMPILER" \
    --compilation_level SIMPLE \
    --env BROWSER \
    --language_in ECMASCRIPT_NEXT \
    --language_out ECMASCRIPT_2016 \
    --warning_level QUIET \
    --js_output_file "$WEB_DIRECTORY/build/dist/index.min.js" "$WEB_DIRECTORY/build/dist/index.js"

echo "Minify worker.js."
java -jar "$CLOSURE_COMPILER" \
    --compilation_level SIMPLE \
    --env BROWSER \
    --language_in ECMASCRIPT_NEXT \
    --language_out ECMASCRIPT_2016 \
    --warning_level QUIET \
    --js_output_file "$WEB_DIRECTORY/build/dist/worker.min.js" "$WEB_DIRECTORY/build/dist/worker.js"

echo "Remove original bundles."
rm "$WEB_DIRECTORY/build/dist/index.js" "$WEB_DIRECTORY/build/dist/worker.js"

# copy to official directory.
rm -rf "$WEB_DIRECTORY/dist"
cp -r "$WEB_DIRECTORY/build/dist" "$WEB_DIRECTORY/dist"

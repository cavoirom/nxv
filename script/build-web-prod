#!/usr/bin/env bash

set -e
set -o pipefail
set -v

# Prerequisites
# - deno 1.31.1.
# - dart-sass 1.57.1.

if ! command -v deno &> /dev/null; then
  echo "Please install deno 1.31.1 or later."
  exit 1
fi

if ! command -v sass &> /dev/null; then
  echo "Please install dart-sass 1.57.1 or later."
  exit 1
fi

if ! command -v java &> /dev/null; then
  echo "Please install JDK 11 or later."
  exit 1
fi

SCRIPT_DIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

source "${SCRIPT_DIRECTORY}/utilities"

# Environment variables
PROJECT_DIRECTORY="$( absolute_path "${SCRIPT_DIRECTORY}/.." )"
WEB_DIRECTORY="${PROJECT_DIRECTORY}/web"

CACHE_DIRECTORY="${PROJECT_DIRECTORY}/.cache"
DENO_DIRECTORY="${CACHE_DIRECTORY}/deno"

# test the web.
DENO_DIR="${DENO_DIRECTORY}" deno test \
    --config "$PROJECT_DIRECTORY/deno.jsonc" \
    --allow-env \
    "$WEB_DIRECTORY/test"

# clean build directory.
rm -rf "${WEB_DIRECTORY}/build"
mkdir -p "${WEB_DIRECTORY}/build/dist"

# bundle the app to index.js.
DENO_DIR="${DENO_DIRECTORY}" deno run \
    --config "${PROJECT_DIRECTORY}/deno.jsonc" \
    --allow-read \
    --allow-run \
    --allow-env \
    --allow-write \
    --allow-net \
    "${WEB_DIRECTORY}/bundler/bundler.js" \
    --minify \
    --import-map "${PROJECT_DIRECTORY}/import-map.json" \
    --entrypoint "${WEB_DIRECTORY}/app/index.js" \
    --out-file "${WEB_DIRECTORY}/build/dist/index.js"

# bundle worker.js
DENO_DIR="${DENO_DIRECTORY}" deno run \
    --config "${PROJECT_DIRECTORY}/deno.jsonc" \
    --allow-read \
    --allow-run \
    --allow-env \
    --allow-write \
    --allow-net \
    "${WEB_DIRECTORY}/bundler/bundler.js" \
    --minify \
    --import-map "${PROJECT_DIRECTORY}/import-map.json" \
    --entrypoint "${WEB_DIRECTORY}/app/worker.js" \
    --out-file "${WEB_DIRECTORY}/build/dist/worker.js"

# bundle css to index.css.
sass --style compressed "${WEB_DIRECTORY}/app/index.scss" "${WEB_DIRECTORY}/build/dist/index.css"

# copy static content.
cp "${WEB_DIRECTORY}/app/favicon.ico" "${WEB_DIRECTORY}/build/dist/"
cp "${WEB_DIRECTORY}/app/manifest.webmanifest" "${WEB_DIRECTORY}/build/dist/"
cp "${WEB_DIRECTORY}/app/index.html" "${WEB_DIRECTORY}/build/dist/"
cp "${WEB_DIRECTORY}/content/static/CNAME" "${WEB_DIRECTORY}/build/dist/"
cp "${WEB_DIRECTORY}/content/static/robots.txt" "${WEB_DIRECTORY}/build/dist/"

# generate site from content.
DENO_DIR="${DENO_DIRECTORY}" deno run \
    --config "${PROJECT_DIRECTORY}/deno.jsonc" \
    --allow-read \
    --allow-write \
    --allow-env \
    --allow-net \
    "${WEB_DIRECTORY}/generator/generator.js"

# copy to official directory.
rm -rf "${WEB_DIRECTORY}/dist"
cp -r "${WEB_DIRECTORY}/build/dist" "${WEB_DIRECTORY}/dist"

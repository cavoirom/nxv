{"version":3,"sources":["worker.js"],"names":["assetCacheName","preCacheResources","cacheResources","self","addEventListener","event","hostUrl","URL","target","registration","scope","waitUntil","caches","open","then","assetCache","Promise","all","resolve","keys","map","key","url","host","indexOf","pathname","console","log","delete","addAll","respondWith","match","request","cachedResponse","fetch","response","status","type","toBeCachedResponse","clone","cache","put"],"mappings":"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","file":"worker.js","sourceRoot":"../src/app","sourcesContent":["const assetCacheName = 'asset';\n// preCacheResources will be cleaned up and pre-cached every time we install service worker.\nconst preCacheResources = ['/', '/index.html'];\n// CacheResources will be keep every time we activate service worker, to reduce cache size.\nconst cacheResources = [\n  '/IBMPlexSans-Bold.4dfaebd3.ttf',\n  '/IBMPlexSans-Bold.9bf2f545.svg',\n  '/IBMPlexSans-Bold.9f766d0a.woff',\n  '/IBMPlexSans-Bold.eb647a17.eot',\n  '/IBMPlexSans-BoldItalic.0be4c971.svg',\n  '/IBMPlexSans-BoldItalic.6b960924.eot',\n  '/IBMPlexSans-BoldItalic.a74a87a4.ttf',\n  '/IBMPlexSans-BoldItalic.d5946f79.woff',\n  '/IBMPlexSans-Italic.0bbe81ad.svg',\n  '/IBMPlexSans-Italic.3ab9eaea.woff',\n  '/IBMPlexSans-Italic.94529531.ttf',\n  '/IBMPlexSans-Italic.ec6868b4.eot',\n  '/IBMPlexSans-Regular.0fa616bf.svg',\n  '/IBMPlexSans-Regular.97a23001.ttf',\n  '/IBMPlexSans-Regular.b7fe0cc8.woff',\n  '/IBMPlexSans-Regular.d9968fd3.eot',\n  '/app.320a5a69.css',\n  '/app.320a5a69.css.map',\n  '/app.69f3c742.js',\n  '/app.69f3c742.js.map',\n  '/app.d29b5467.js',\n  '/app.d29b5467.js.map',\n  '/app.fa1796bf.css',\n  '/app.fa1796bf.css.map',\n  '/favicon.eb18f3b3.ico',\n  '/index.html',\n  '/manifest.webmanifest',\n  '/',\n];\n\nself.addEventListener('install', (event) => {\n  // Pre-cache these resources to help page works offline.\n  const hostUrl = new URL(event.target.registration.scope);\n  event.waitUntil(\n    caches\n      .open(assetCacheName)\n      .then((assetCache) => Promise.all([Promise.resolve(assetCache), assetCache.keys()]))\n      .then(([assetCache, keys]) =>\n        Promise.all([\n          Promise.resolve(assetCache),\n          keys.map((key) => {\n            // Clean up pre-cached resources because they may out dated and they will be excluded when clean up the\n            // cache in activate event.\n            const url = new URL(key.url);\n            if (hostUrl.host === url.host && preCacheResources.indexOf(url.pathname) > -1) {\n              console.log('Clean up pre-cached resource: ', key.url);\n              return assetCache.delete(key);\n            }\n          }),\n        ]),\n      )\n      .then(([assetCache]) => assetCache.addAll(preCacheResources)),\n  );\n});\n\nself.addEventListener('activate', (event) => {\n  // Clean up the caches every time a new version activated to reduce cache size.\n  const hostUrl = new URL(event.target.registration.scope);\n  event.waitUntil(\n    caches\n      .keys()\n      .then((keys) =>\n        Promise.all(\n          keys.map((key) => {\n            console.log('Found cache: ', key);\n            if (key !== assetCacheName) {\n              console.log('Delete out dated cache: ', key);\n              return caches.delete(key);\n            }\n          }),\n        ),\n      )\n      .then(() => caches.open(assetCacheName))\n      .then((assetCache) => Promise.all([Promise.resolve(assetCache), assetCache.keys()]))\n      .then(([assetCache, keys]) =>\n        Promise.all(\n          keys.map((key) => {\n            const url = new URL(key.url);\n            if (hostUrl.host !== url.host || cacheResources.indexOf(url.pathname) === -1) {\n              console.log('Clean up cached resource: ', key.url);\n              return assetCache.delete(key);\n            }\n            console.log('Resource unchanged, keep the cache: ', key.url);\n          }),\n        ),\n      ),\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request).then((cachedResponse) => {\n      // Cache hit - return response\n      if (cachedResponse) {\n        return cachedResponse;\n      }\n\n      return fetch(event.request).then((response) => {\n        // Check if we received a valid response\n        if (!response || response.status !== 200 || response.type !== 'basic') {\n          return response;\n        }\n\n        // IMPORTANT: Clone the response. A response is a stream\n        // and because we want the browser to consume the response\n        // as well as the cache consuming the response, we need\n        // to clone it so we have two streams.\n        const toBeCachedResponse = response.clone();\n\n        caches.open(assetCacheName).then((cache) => {\n          cache.put(event.request, toBeCachedResponse);\n        });\n\n        return response;\n      });\n    }),\n  );\n});\n"]}